[{"categories":["Java"],"contents":"File upload \u0026amp; Show on View Table    Column Name      id int primary key identity   filename VARCHAR(255)   picture VARBINARY(MAX)    1 2 3 4 5  createtablepicture(idintprimarykeyidentitynotnullfilenameVARCHAR(255),pictureVARBINARY(MAX),)  Eitity 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  package com.example.picturedemo.Entity; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Transient; @Entity @Table(name = \u0026#34;picture\u0026#34;) public class Picture { @Id @Column(name = \u0026#34;id\u0026#34;) @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @Column(name = \u0026#34;filename\u0026#34;) private String filename; @Column(name = \u0026#34;picture\u0026#34;,columnDefinition = \u0026#34;VARBINARY(MAX)\u0026#34;) private byte[] picture; //只是用於暫時儲存，經過base64編碼後的字串，給view顯示用的，不需儲存進DataBase，所以加上 @Transient  @Transient private String base64imageFile; public Picture() { } //Getter...  //Setter...    Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  package com.example.picturedemo.Controller; import com.example.picturedemo.Entity.Picture; import java.io.IOException; import java.nio.charset.StandardCharsets; import org.apache.tomcat.util.codec.binary.Base64; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.multipart.MultipartFile; import org.springframework.web.servlet.ModelAndView; @Controller public class PictureController { @GetMapping(\u0026#34;/\u0026#34;) public String indexPage() { return \u0026#34;indexForm\u0026#34;; } //用 ModelAndView 方式回傳View  @PostMapping(\u0026#34;/upload\u0026#34;) public ModelAndView upload( ModelAndView mav, @RequestParam(\u0026#34;multipartFile\u0026#34;) MultipartFile multipartFile) throws IOException { //檔案名  String fileName = multipartFile.getOriginalFilename(); //將檔案轉為byte陣列，可用於寫入DataBase的 varbinary欄位  byte[] bytesOfFile = multipartFile.getBytes(); // 將原本的byte[]編碼為base64的byte[]，要import org.apache.tomcat.util.codec.binary.Base64  byte[] encodeBase64 = Base64.encodeBase64(bytesOfFile); //將編碼完byte[]的轉成String  String base64EncodedStr = new String(encodeBase64, StandardCharsets.UTF_8); //將資料透過Setter放進Java bean  Picture p = new Picture(); p.setFilename(fileName); p.setPicture(bytesOfFile); p.setBase64imageFile(base64EncodedStr); mav.addObject(\u0026#34;picture\u0026#34;, p); mav.setViewName(\u0026#34;indexForm\u0026#34;); return mav; } //前端用ajax呼叫，回傳JSON  @PostMapping(\u0026#34;/uploadAjax\u0026#34;) @ResponseBody public Picture upload(@RequestParam(\u0026#34;files\u0026#34;) MultipartFile multipartFile) throws IOException { //檔案名  String fileName = multipartFile.getOriginalFilename(); //將檔案轉為byte陣列，可用於寫入DataBase的 varbinary欄位  byte[] bytesOfFile = multipartFile.getBytes(); //回傳的JSON中，byte[] 已經用base64編譯過了，就不用再手動編譯  //將資料透過Setter放資料  Picture p = new Picture(); p.setFilename(fileName); p.setPicture(bytesOfFile); return p; } }   View (jsp) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  \u0026lt;%--@elvariable id=\u0026#34;picture\u0026#34; type=\u0026#34;com.example.picturedemo.Entity.Picture\u0026#34;--%\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;%@ taglib prefix=\u0026#34;c\u0026#34; uri=\u0026#34;http://java.sun.com/jsp/jstl/core\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#39;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\u0026#39; integrity=\u0026#39;sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\u0026#39; crossorigin=\u0026#39;anonymous\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Form Submit\u0026lt;/h1\u0026gt; \u0026lt;form action=\u0026#34;upload\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;uploadFile\u0026#34;\u0026gt;上傳檔案\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;multipartFile\u0026#34; id=\u0026#34;multipartFile\u0026#34;\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;h1\u0026gt;Form Ajax\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34; id=\u0026#34;uploadForm1\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;uploadFile\u0026#34;\u0026gt;上傳檔案\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;files\u0026#34; id=\u0026#34;uploadFile\u0026#34;\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- button 不能放在form裏面 --\u0026gt; \u0026lt;button id=\u0026#34;ajaxBtn\u0026#34;\u0026gt;Ajax Submit\u0026lt;/button\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Form Submit 結果\u0026lt;/h3\u0026gt; \u0026lt;span\u0026gt;檔名：${picture.filename}\u0026lt;/span\u0026gt; \u0026lt;!-- ModelAndView 傳回來的IMG --\u0026gt; \u0026lt;img src=\u0026#34;data:image/jpeg;base64,${picture.base64imageFile}\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Form Ajax 結果\u0026lt;/h3\u0026gt; \u0026lt;span id=\u0026#34;resultSpan\u0026#34;\u0026gt;檔名：\u0026lt;/span\u0026gt; \u0026lt;!-- ajax 取回資料後 在設定src --\u0026gt; \u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; id=\u0026#34;ajaxImg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(\u0026#39;#ajaxBtn\u0026#39;).click(function (event) { send(); }); function send() { let form = $(\u0026#39;#uploadForm1\u0026#39;)[0]; let dataFile = new FormData(form); $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;uploadAjax\u0026#34;, data: dataFile, processData: false, //防止jquery將data變成query String  contentType: false, success: function (data) { $(\u0026#39;#resultSpan\u0026#39;).append(data.filename); // 回傳的Content-Type：application/json  let src = \u0026#39;data:image/jpeg;base64,\u0026#39; + data.picture; // data.picture與data.base64imageFile是相同的  $(\u0026#39;#ajaxImg\u0026#39;).attr(\u0026#39;src\u0026#39;, src); }, error: function (e) { console.log(\u0026#34;ERROR : \u0026#34;, e); } }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   第一種: 用ModelAndView回傳model，jsp用ＥＬ取得${picture.base64imageFile} base64imageFile 是已經編譯為base64的String，才能放在img的src裏面 (見View第35行) 第二種: 前端用ajax傳FormData，後端用@Controller + @ResponseBody return Java Bean 回傳的Content-Type:application/json Java Bean中，byte[]型態的成員變數，會自動轉為base64的字串，Server端不用再手動轉換一次 ","permalink":"https://w32191.github.io/blog/file_upload/","tags":["Spring","Java"],"title":"File upload \u0026 Show on View"},{"categories":["Java"],"contents":"Spring MVC \u0026amp; HikariCP \u0026amp; Hibernate Dependency pom.xml \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;TestProject\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;TestProject\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;spring.version\u0026gt;5.3.16\u0026lt;/spring.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Spring Core Container --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-context\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-beans\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-expression\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Web \u0026amp; Mvc --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-web\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-webmvc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Data Access --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-orm\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-tx\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-oxm\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- DataBase --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.microsoft.sqlserver\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mssql-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;9.4.1.jre11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.6.5.Final\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-io\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-io\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.11.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-fileupload\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-fileupload\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- JSON --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-databind\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.13.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.13.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-annotations\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.13.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;release\u0026gt;11\u0026lt;/release\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-war-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.3\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; ","permalink":"https://w32191.github.io/blog/spring_mvc_pom/","tags":["Spring","Java"],"title":"Spring MVC Maven pom.xml"},{"categories":["Docker"],"contents":"指令：\ndocker cp \u0026lt;src_file_path\u0026gt; \u0026lt;container name\u0026gt;:\u0026lt;target_path\u0026gt;  \u0026lt;src_file_path\u0026gt; ：要複製的檔案來源位置＆檔名 \u0026lt;container name\u0026gt; ：容器名，可用docker ps -a 查看，或用container的ID亦可 \u0026lt;target_path\u0026gt; ：容器內要複製的目標位置  Ex:\n現有一檔案名test.txt、另有一container名 testContainer，\n要複製到testContainer中路徑 /tmp/中，並更名為target.txt\ndocker cp test.txt testContainer:/tmp/target.txt 複製後使用docker exec -it container_ID bash 進入container_ID的bash\ndocker exec -it testContainer bash testContainer@e27a6feb195c:/$ 在container bash根目錄中 cd tmp \u0026amp;\u0026amp; ls 查看是否有複製成功\ntestContainer@e27a6feb195c:/$ cd tmp \u0026amp;\u0026amp; ls target.txt ","permalink":"https://w32191.github.io/blog/docker_copy_file/","tags":["docker"],"title":"Docker 複製本機檔案至Container"},{"categories":["Java"],"contents":"1. 在webapp中 META-INF資料夾內,新增一個context.xml檔案 內容：設定資料庫相關資訊 name 一定要\u0026quot;jdbc/\u0026quot; 開頭，後面可自訂\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;Context path=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;Resource url=\u0026#34;jdbc:sqlserver://localhost:1433;databaseName=servdb\u0026#34; driverClassName=\u0026#34;com.microsoft.sqlserver.jdbc.SQLServerDriver\u0026#34; username=\u0026#34;sa\u0026#34; password=\u0026#34;Passw0rd!\u0026#34; type=\u0026#34;javax.sql.DataSource\u0026#34; name=\u0026#34;jdbc/servdb\u0026#34; maxWaitMillis=\u0026#34;-1\u0026#34; maxIdle=\u0026#34;5\u0026#34; maxTotal=\u0026#34;8\u0026#34; auth=\u0026#34;Container\u0026#34; initialSize=\u0026#34;5\u0026#34; poolPreparedStatements=\u0026#34;true\u0026#34; validationQuery=\u0026#34;select 1\u0026#34; /\u0026gt; \u0026lt;/Context\u0026gt; 2. 在web.xml中新增 res-ref-name 要與上方的name相同\n\u0026lt;resource-ref\u0026gt; \u0026lt;description\u0026gt;JNDI DataSource \u0026lt;/description\u0026gt; \u0026lt;res-ref-name\u0026gt;jdbc/servdb\u0026lt;/res-ref-name\u0026gt; \u0026lt;res-type\u0026gt;javax.sql.DataSource\u0026lt;/res-type\u0026gt; \u0026lt;res-auth\u0026gt;Container\u0026lt;/res-auth\u0026gt; \u0026lt;/resource-ref\u0026gt; 3. java中取得連線池連線 紅匡處要與上方res-ref-name相同\nContext context = new InitialContext(); DataSource ds = (DataSource) context.lookup(\u0026#34;java:/comp/env/jdbc/servdb\u0026#34;); conn = ds.getConnection(); ","permalink":"https://w32191.github.io/blog/connection_pool_setup/","tags":["Java"],"title":"Connection Pool setup"},{"categories":["SQL"],"contents":"Primary key 設定IDENTITY後，想重新計數，語法：\n-- Syntax for SQL Server and Azure SQL Database DBCCCHECKIDENT(table_name[,{NORESEED|{RESEED[,new_reseed_value]}}])[WITHNO_INFOMSGS]範例： 現在想將MyTable，這張table從0再開始自增：\nDBCCCHECKIDENT(MyTable,RESEED,0);執行後即可。\n資料來源：官網\n","permalink":"https://w32191.github.io/blog/mssql_identity_reseed/","tags":["SQL"],"title":"SQL Server IDENTITY RESEED"},{"categories":["SQL"],"contents":"SQL Server 台灣中文編碼 docker 裡面的 SQL Server 在 Insert 資料時中文會呈現亂碼。\n解決辦法： database create 時，設定定序(COLLATE)\nCREATEDATABASEdb_nameCOLLATEChinese_Taiwan_Stroke_CI_AI資料來源：Jerry Tai、官網資料\n","permalink":"https://w32191.github.io/blog/sql_chinese_collate/","tags":["SQL","docker"],"title":"SQL Server in docker 中文編碼"},{"categories":["SQL"],"contents":"官網資料：Microsoft DOC\n將container image pull下來\ndocker pull mcr.microsoft.com/mssql/server:2019-latest 再run\nsudo docker run -e \u0026#39;ACCEPT_EULA=Y\u0026#39; -e \u0026#39;SA_PASSWORD=Passw0rd!\u0026#39; \\  -p 1433:1433 --name sql1 \\  -e \u0026#39;TZ=Asia/Taipei\u0026#39;\\  -d mcr.microsoft.com/mssql/server:2019-latest SQL Server 2019 不支援 ARM架構的MAC 改安裝 Azure SQL Edge\ndocker pull mcr.microsoft.com/azure-sql-edge sudo docker run -e \u0026#39;ACCEPT_EULA=Y\u0026#39; -e \u0026#39;SA_PASSWORD=Passw0rd!\u0026#39; \\  -p 1433:1433 --name sql1 \\  -e \u0026#39;TZ=Asia/Taipei\u0026#39;\\  -d mcr.microsoft.com/azure-sql-edge 確認是否有啟動：\ndocker ps -a 記下 Container ID。\n停止ＭＳＳＱＬ：\ndocker stop \u0026#39;Container ID\u0026#39; 重新啟動ＭＳＳＱＬ\ndocker start \u0026#39;Container ID\u0026#39; 資料來源： Jerry Tai、 How to Install SQL Server on an M1 Mac (ARM64)\n","permalink":"https://w32191.github.io/blog/docker_mssql/","tags":["SQL","docker"],"title":"用 docker 架 MSSQL 環境"},{"categories":["Java"],"contents":"1. File \u0026raquo; New \u0026raquo; Project from Existing Sources 2. Import project from external model \u0026raquo; eclipse 3. 選Create module files near .classpath files 4. Next 5. Use default project code style 6. 設定ＪＤＫ版本後就Finish 7. File \u0026raquo; Project Structure 8. 設定ＪＤＫ，並將下方紅色的 移除 9. 將WEB-INF裡面的lib資料夾設為 Jar Directory 點加號，選第一個Jar or Directories 10. 點加號，選Library,將Tomcat加入 (如沒有設定過Tomcat，後面流程設定後，再回來選) 點ＯＫ 11. 左邊選單Facets ＋Web 會跳出Module，點OK 12. 預設帶進來的Deployment Descriptors與下方Directory會是錯的 Deployment Descriptors路徑要改到 web.xml (如果沒有就先刪掉) 下方Directory路徑要設定到webapp資料夾 13. 設定Artifacts \u0026raquo; Web Application: Exploded \u0026raquo; from Modules 會跳出Module，點OK 右下角ＯＫ 設定Tomcat Add Configuration \u0026raquo; Edit Configuration templates Configure\u0026hellip; 選到Tomcat 資料夾 ＯＫ Add new\u0026hellip; \u0026raquo; Tomcat Server \u0026raquo; Local Deployment \u0026raquo; ➕Artifact  Application context \u0026raquo; 設定後專案網址：http://localhost:8080/Servlet01/ ","permalink":"https://w32191.github.io/blog/intellij_dynamic_web_project/","tags":["Java"],"title":"用IntelliJ IDEA (2021.3.2) 導入 eclipse dynamic web project"},{"categories":[""],"contents":"你好～想更了解我，請點～ \u0026raquo; \n","permalink":"https://w32191.github.io/blog/thefirstpage/","tags":[""],"title":"Day One Of My Website"},{"categories":[""],"contents":"Hello World\n我是阿翔\n一級標題 二級標題 六級標題 我是阿翔，學習中\n Hello  World     Hello\n github\npost\nSam Wanghello\npublic static void main(String[] args){ sysyem.out.println(\u0026#34;hello world); } ","permalink":"https://w32191.github.io/blog/test/","tags":[""],"title":"test"},{"categories":[""],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://w32191.github.io/blog/post-13/","tags":[""],"title":"How To Use Checklists To Improve Your UX"}]